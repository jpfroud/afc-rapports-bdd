import { fileURLToPath } from 'url'
import path, { dirname } from 'path'
import fs from 'fs'

// Recréer __dirname en utilisant import.meta.url
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Fonction pour parcourir les fichiers .feature
function findFeatureFiles(dir, baseDir) {
  let results = []

  fs.readdirSync(dir).forEach((file) => {
    const filePath = path.join(dir, file)
    const stat = fs.statSync(filePath)

    if (stat && stat.isDirectory()) {
      // Récursion pour les sous-dossiers
      results = results.concat(findFeatureFiles(filePath, baseDir))
    } else if (filePath.endsWith('.feature')) {
      // Générer un chemin relatif basé sur `baseDir`
      const relativePath = '/' + path.relative(baseDir, filePath).replace(/\\/g, '/')
      results.push(relativePath)
    }
  })

  return results
}

function findFeatureSlugs(featureFiles) {
  return [...new Set(
    featureFiles.map((featureFile) => {
      const match = featureFile.match(/^\/projects\/([^/]+)/)
      return match ? match[1] : null
    }).filter(slug => slug !== null)
  )]
}

// Fonction pour générer le fichier ts
function generateFile() {
  // Définir le chemin du répertoire et du fichier
  const outputDirPath = path.join(__dirname, '../src/generated/')
  const outputFilePath = path.join(outputDirPath, 'featureFiles.ts')

  // Vérifier si le répertoire existe, sinon le créer
  if (!fs.existsSync(outputDirPath)) {
    fs.mkdirSync(outputDirPath, { recursive: true })
  }

  const inputDirPath = path.join(__dirname, '../public/')
  const featureFiles = findFeatureFiles(inputDirPath, inputDirPath)
  const featureSlugs = findFeatureSlugs(featureFiles)
  const data = '//generated by generate-feature-list plugin\n' +
    'export const FEATURE_FILES = ' + JSON.stringify(featureFiles, null, 2) + '\n\n' +
    'export const FEATURE_SLUGS = ' + JSON.stringify(featureSlugs, null, 2)
  fs.writeFileSync(outputFilePath, data)
  console.log(`Feature files list generated: ${outputFilePath}`)
}

generateFile()
